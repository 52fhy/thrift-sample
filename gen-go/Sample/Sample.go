// Autogenerated by Thrift Compiler (0.12.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package Sample

import (
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type Data map[string]string

func DataPtr(v Data) *Data { return &v }

// Attributes:
//  - ID
//  - Name
//  - Avatar
//  - Address
//  - Mobile
type User struct {
  ID int32 `thrift:"id,1,required" db:"id" json:"id"`
  Name string `thrift:"name,2,required" db:"name" json:"name"`
  Avatar string `thrift:"avatar,3,required" db:"avatar" json:"avatar"`
  Address string `thrift:"address,4,required" db:"address" json:"address"`
  Mobile string `thrift:"mobile,5,required" db:"mobile" json:"mobile"`
}

func NewUser() *User {
  return &User{}
}


func (p *User) GetID() int32 {
  return p.ID
}

func (p *User) GetName() string {
  return p.Name
}

func (p *User) GetAvatar() string {
  return p.Avatar
}

func (p *User) GetAddress() string {
  return p.Address
}

func (p *User) GetMobile() string {
  return p.Mobile
}
func (p *User) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetID bool = false;
  var issetName bool = false;
  var issetAvatar bool = false;
  var issetAddress bool = false;
  var issetMobile bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetID = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
        issetName = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
        issetAvatar = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
        issetAddress = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
        issetMobile = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"));
  }
  if !issetName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"));
  }
  if !issetAvatar{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Avatar is not set"));
  }
  if !issetAddress{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Address is not set"));
  }
  if !issetMobile{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Mobile is not set"));
  }
  return nil
}

func (p *User)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *User)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *User)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Avatar = v
}
  return nil
}

func (p *User)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Address = v
}
  return nil
}

func (p *User)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Mobile = v
}
  return nil
}

func (p *User) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("User"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *User) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *User) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *User) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("avatar", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:avatar: ", p), err) }
  if err := oprot.WriteString(string(p.Avatar)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.avatar (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:avatar: ", p), err) }
  return err
}

func (p *User) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("address", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:address: ", p), err) }
  if err := oprot.WriteString(string(p.Address)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.address (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:address: ", p), err) }
  return err
}

func (p *User) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mobile", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:mobile: ", p), err) }
  if err := oprot.WriteString(string(p.Mobile)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mobile (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:mobile: ", p), err) }
  return err
}

func (p *User) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("User(%+v)", *p)
}

// Attributes:
//  - UserList
//  - Page
//  - Limit
type UserList struct {
  UserList []*User `thrift:"userList,1,required" db:"userList" json:"userList"`
  Page int32 `thrift:"page,2,required" db:"page" json:"page"`
  Limit int32 `thrift:"limit,3,required" db:"limit" json:"limit"`
}

func NewUserList() *UserList {
  return &UserList{}
}


func (p *UserList) GetUserList() []*User {
  return p.UserList
}

func (p *UserList) GetPage() int32 {
  return p.Page
}

func (p *UserList) GetLimit() int32 {
  return p.Limit
}
func (p *UserList) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetUserList bool = false;
  var issetPage bool = false;
  var issetLimit bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetUserList = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
        issetPage = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
        issetLimit = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetUserList{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserList is not set"));
  }
  if !issetPage{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Page is not set"));
  }
  if !issetLimit{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Limit is not set"));
  }
  return nil
}

func (p *UserList)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*User, 0, size)
  p.UserList =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &User{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.UserList = append(p.UserList, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *UserList)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Page = v
}
  return nil
}

func (p *UserList)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Limit = v
}
  return nil
}

func (p *UserList) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UserList"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserList) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userList", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userList: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.UserList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.UserList {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userList: ", p), err) }
  return err
}

func (p *UserList) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("page", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:page: ", p), err) }
  if err := oprot.WriteI32(int32(p.Page)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.page (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:page: ", p), err) }
  return err
}

func (p *UserList) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("limit", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:limit: ", p), err) }
  if err := oprot.WriteI32(int32(p.Limit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.limit (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:limit: ", p), err) }
  return err
}

func (p *UserList) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserList(%+v)", *p)
}

// Attributes:
//  - ErrCode
//  - ErrMsg
//  - Data
type Response struct {
  ErrCode int32 `thrift:"errCode,1,required" db:"errCode" json:"errCode"`
  ErrMsg string `thrift:"errMsg,2,required" db:"errMsg" json:"errMsg"`
  Data Data `thrift:"data,3,required" db:"data" json:"data"`
}

func NewResponse() *Response {
  return &Response{}
}


func (p *Response) GetErrCode() int32 {
  return p.ErrCode
}

func (p *Response) GetErrMsg() string {
  return p.ErrMsg
}

func (p *Response) GetData() Data {
  return p.Data
}
func (p *Response) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetErrCode bool = false;
  var issetErrMsg bool = false;
  var issetData bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetErrCode = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
        issetErrMsg = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
        issetData = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetErrCode{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrCode is not set"));
  }
  if !issetErrMsg{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrMsg is not set"));
  }
  if !issetData{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Data is not set"));
  }
  return nil
}

func (p *Response)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ErrCode = v
}
  return nil
}

func (p *Response)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ErrMsg = v
}
  return nil
}

func (p *Response)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(Data, size)
  p.Data =  tMap
  for i := 0; i < size; i ++ {
var _key1 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key1 = v
}
var _val2 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val2 = v
}
    p.Data[_key1] = _val2
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Response) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Response) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("errCode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:errCode: ", p), err) }
  if err := oprot.WriteI32(int32(p.ErrCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.errCode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:errCode: ", p), err) }
  return err
}

func (p *Response) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("errMsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:errMsg: ", p), err) }
  if err := oprot.WriteString(string(p.ErrMsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.errMsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:errMsg: ", p), err) }
  return err
}

func (p *Response) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("data", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:data: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Data)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Data {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:data: ", p), err) }
  return err
}

func (p *Response) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Response(%+v)", *p)
}

type Greeter interface {
  // Parameters:
  //  - User
  SayHello(ctx context.Context, user *User) (r *Response, err error)
  // Parameters:
  //  - UID
  GetUser(ctx context.Context, uid int32) (r *Response, err error)
}

type GreeterClient struct {
  c thrift.TClient
}

func NewGreeterClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *GreeterClient {
  return &GreeterClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewGreeterClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *GreeterClient {
  return &GreeterClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewGreeterClient(c thrift.TClient) *GreeterClient {
  return &GreeterClient{
    c: c,
  }
}

func (p *GreeterClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - User
func (p *GreeterClient) SayHello(ctx context.Context, user *User) (r *Response, err error) {
  var _args3 GreeterSayHelloArgs
  _args3.User = user
  var _result4 GreeterSayHelloResult
  if err = p.Client_().Call(ctx, "SayHello", &_args3, &_result4); err != nil {
    return
  }
  return _result4.GetSuccess(), nil
}

// Parameters:
//  - UID
func (p *GreeterClient) GetUser(ctx context.Context, uid int32) (r *Response, err error) {
  var _args5 GreeterGetUserArgs
  _args5.UID = uid
  var _result6 GreeterGetUserResult
  if err = p.Client_().Call(ctx, "GetUser", &_args5, &_result6); err != nil {
    return
  }
  return _result6.GetSuccess(), nil
}

type GreeterProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler Greeter
}

func (p *GreeterProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *GreeterProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *GreeterProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewGreeterProcessor(handler Greeter) *GreeterProcessor {

  self7 := &GreeterProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self7.processorMap["SayHello"] = &greeterProcessorSayHello{handler:handler}
  self7.processorMap["GetUser"] = &greeterProcessorGetUser{handler:handler}
return self7
}

func (p *GreeterProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x8 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x8.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x8

}

type greeterProcessorSayHello struct {
  handler Greeter
}

func (p *greeterProcessorSayHello) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := GreeterSayHelloArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("SayHello", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := GreeterSayHelloResult{}
var retval *Response
  var err2 error
  if retval, err2 = p.handler.SayHello(ctx, args.User); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SayHello: " + err2.Error())
    oprot.WriteMessageBegin("SayHello", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("SayHello", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type greeterProcessorGetUser struct {
  handler Greeter
}

func (p *greeterProcessorGetUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := GreeterGetUserArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetUser", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := GreeterGetUserResult{}
var retval *Response
  var err2 error
  if retval, err2 = p.handler.GetUser(ctx, args.UID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetUser: " + err2.Error())
    oprot.WriteMessageBegin("GetUser", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetUser", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - User
type GreeterSayHelloArgs struct {
  User *User `thrift:"user,1,required" db:"user" json:"user"`
}

func NewGreeterSayHelloArgs() *GreeterSayHelloArgs {
  return &GreeterSayHelloArgs{}
}

var GreeterSayHelloArgs_User_DEFAULT *User
func (p *GreeterSayHelloArgs) GetUser() *User {
  if !p.IsSetUser() {
    return GreeterSayHelloArgs_User_DEFAULT
  }
return p.User
}
func (p *GreeterSayHelloArgs) IsSetUser() bool {
  return p.User != nil
}

func (p *GreeterSayHelloArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetUser bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetUser = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetUser{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field User is not set"));
  }
  return nil
}

func (p *GreeterSayHelloArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.User = &User{}
  if err := p.User.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.User), err)
  }
  return nil
}

func (p *GreeterSayHelloArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SayHello_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GreeterSayHelloArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err) }
  if err := p.User.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.User), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err) }
  return err
}

func (p *GreeterSayHelloArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GreeterSayHelloArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GreeterSayHelloResult struct {
  Success *Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewGreeterSayHelloResult() *GreeterSayHelloResult {
  return &GreeterSayHelloResult{}
}

var GreeterSayHelloResult_Success_DEFAULT *Response
func (p *GreeterSayHelloResult) GetSuccess() *Response {
  if !p.IsSetSuccess() {
    return GreeterSayHelloResult_Success_DEFAULT
  }
return p.Success
}
func (p *GreeterSayHelloResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *GreeterSayHelloResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GreeterSayHelloResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Response{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *GreeterSayHelloResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SayHello_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GreeterSayHelloResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GreeterSayHelloResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GreeterSayHelloResult(%+v)", *p)
}

// Attributes:
//  - UID
type GreeterGetUserArgs struct {
  UID int32 `thrift:"uid,1,required" db:"uid" json:"uid"`
}

func NewGreeterGetUserArgs() *GreeterGetUserArgs {
  return &GreeterGetUserArgs{}
}


func (p *GreeterGetUserArgs) GetUID() int32 {
  return p.UID
}
func (p *GreeterGetUserArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetUID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetUID = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetUID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UID is not set"));
  }
  return nil
}

func (p *GreeterGetUserArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *GreeterGetUserArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetUser_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GreeterGetUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI32(int32(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *GreeterGetUserArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GreeterGetUserArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GreeterGetUserResult struct {
  Success *Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewGreeterGetUserResult() *GreeterGetUserResult {
  return &GreeterGetUserResult{}
}

var GreeterGetUserResult_Success_DEFAULT *Response
func (p *GreeterGetUserResult) GetSuccess() *Response {
  if !p.IsSetSuccess() {
    return GreeterGetUserResult_Success_DEFAULT
  }
return p.Success
}
func (p *GreeterGetUserResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *GreeterGetUserResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GreeterGetUserResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Response{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *GreeterGetUserResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetUser_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GreeterGetUserResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GreeterGetUserResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GreeterGetUserResult(%+v)", *p)
}


